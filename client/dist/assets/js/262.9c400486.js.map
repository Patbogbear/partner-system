{"version":3,"file":"assets/js/262.9c400486.js","mappings":"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","sources":["webpack://client/./node_modules/@kurkle/color/dist/color.esm.js","webpack://client/./node_modules/chart.js/dist/chunks/helpers.segment.js","webpack://client/./node_modules/chart.js/dist/chart.js","webpack://client/./src/views/index.vue","webpack://client/./src/views/index.vue?fb31"],"sourcesContent":["/*!\n * @kurkle/color v0.3.2\n * https://github.com/kurkle/color#readme\n * (c) 2023 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","/*!\n * Chart.js v4.4.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || typeof value === 'undefined';\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\nfunction isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , _parsed  } = meta;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop)) {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\n * necessary to avoid duplicates with `export * from './helpers`; see\n * https://github.com/microsoft/TypeScript/issues/46011\n * @typedef { import('../core/core.controller.js').default } dom.Chart\n * @typedef { import('../../types').ChartEvent } ChartEvent\n */ /**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        window.addEventListener('test', null, options);\n        window.removeEventListener('test', null, options);\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, fontString as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, overrideTextDirection as aA, _textX as aB, restoreTextDirection as aC, drawPointLegend as aD, distanceBetweenPoints as aE, noop as aF, _setMinAndMaxByKey as aG, niceNum as aH, almostWhole as aI, almostEquals as aJ, _decimalPlaces as aK, Ticks as aL, log10 as aM, _longestText as aN, _filterBetween as aO, _lookup as aP, isPatternOrGradient as aQ, getHoverColor as aR, clone as aS, _merger as aT, _mergerIf as aU, _deprecated as aV, _splitKey as aW, toFontString as aX, splineCurve as aY, splineCurveMonotone as aZ, getStyle as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, _elementsEqual as ah, _isClickEvent as ai, _isBetween as aj, _readValueToProps as ak, _updateBezierControlPoints as al, _computeSegments as am, _boundSegments as an, _steppedInterpolation as ao, _bezierInterpolation as ap, _pointInLine as aq, _steppedLineTo as ar, _bezierCurveTo as as, drawPoint as at, addRoundedRectPath as au, toTRBL as av, toTRBLCorners as aw, _boundSegment as ax, _normalizeAngle as ay, getRtlAdapter as az, isArray as b, toLineHeight as b0, PITAU as b1, INFINITY as b2, RAD_PER_DEG as b3, QUARTER_PI as b4, TWO_THIRDS_PI as b5, _angleDiff as b6, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.segment.js.map\n","/*!\n * Chart.js v4.4.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.0\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let x = 0;\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                x += pos.x;\n                y += pos.y;\n                ++count;\n            }\n        }\n        return {\n            x: x / count,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n","<template>\n  <div class=\"home\">\n    <div class=\"page-wrapper\">\n      <div class=\"page-header d-print-none\">\n        <div class=\"container-xl\">\n          <div class=\"row g-2 align-items-center\">\n            <div class=\"col\">\n              <!-- Page pre-title -->\n              <div class=\"page-pretitle\">Overview</div>\n              <h2 class=\"page-title\">Dashboard{{ currentData }}</h2>\n            </div>\n            <!-- Page title actions -->\n            <div class=\"col-auto ms-auto d-print-none\">\n              <div class=\"btn-list\">\n                <a\n                  @click=\"goto_add()\"\n                  class=\"btn btn-primary d-none d-sm-inline-block add-new-partner\"\n                  data-bs-toggle=\"modal\"\n                  data-bs-target=\"#modal-report\"\n                >\n                  <!-- Download SVG icon from http://tabler-icons.io/i/plus -->\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    class=\"icon\"\n                    width=\"24\"\n                    height=\"24\"\n                    viewBox=\"0 0 24 24\"\n                    stroke-width=\"2\"\n                    stroke=\"currentColor\"\n                    fill=\"none\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                  >\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path d=\"M12 5l0 14\" />\n                    <path d=\"M5 12l14 0\" />\n                  </svg>\n                  Add new partner\n                </a>\n                <span class=\"d-none d-sm-inline\">\n                  <a href=\"#\" class=\"btn logout\" @click=\"logOut()\"> Logout </a>\n                </span>\n                <!-- <div>\n                  <input type=\"file\" @change=\"uploadFile\">\n                </div> -->\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"page-body\">\n        <div class=\"container-xl\">\n          <div class=\"row row-deck row-cards\">\n            <div class=\"col-sm-6 col-lg-3\">\n              <div class=\"card\">\n                <div class=\"card-body\">\n                  <div class=\"d-flex align-items-center\">\n                    <div class=\"subheader\">Total Partners</div>\n                  </div>\n                  <div class=\"h1 mb-3\">{{ partners.length }}</div>\n                  <div class=\"d-flex mb-2\">\n                    <div>contact rate</div>\n                    <div class=\"ms-auto\">\n                      <span\n                        class=\"text-green d-inline-flex align-items-center lh-1\"\n                      >\n                        {{ contactPercentage }}%\n                      </span>\n                    </div>\n                  </div>\n                  <div class=\"progress progress-sm\">\n                    <div\n                      class=\"progress-bar bg-primary\"\n                      :style=\"{ width: contactPercentage + '%' }\"\n                      role=\"progressbar\"\n                      aria-valuenow=\"75\"\n                      aria-valuemin=\"0\"\n                      aria-valuemax=\"100\"\n                      aria-label=\"75% Complete\"\n                    >\n                      <span class=\"visually-hidden\">75% Complete</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-sm-6 col-lg-3\">\n              <div class=\"card\">\n                <div class=\"card-body\">\n                  <div class=\"d-flex align-items-center\">\n                    <div class=\"subheader\">In collaboration</div>\n                    <div class=\"ms-auto lh-1\">\n                      <a\n                        class=\"dropdown-toggle text-secondary\"\n                        href=\"#\"\n                        data-bs-toggle=\"dropdown\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"false\"\n                        >{{ selectedCity }}</a\n                      >\n                      <div class=\"dropdown-menu dropdown-menu-end\">\n                        <a\n                          class=\"dropdown-item active\"\n                          @click=\"selectCity('SH')\"\n                          >SH</a\n                        >\n                        <a class=\"dropdown-item\" @click=\"selectCity('HZ')\"\n                          >HZ</a\n                        >\n                        <a class=\"dropdown-item\" @click=\"selectCity('BJ')\"\n                          >BJ</a\n                        >\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"d-flex\" style=\"align-items: center\">\n                    <div\n                      class=\"h1 mb-0 me-2\"\n                      style=\"width: 100px; height: 100px\"\n                    >\n                      <canvas ref=\"chart\"></canvas>\n                    </div>\n                    <div class=\"me-auto lh-1\">\n                      <span class=\"text-green\">\n                        <ul style=\"list-style-type: none; padding-left: 0\">\n                          <li\n                            v-for=\"(label, index) in labels\"\n                            :key=\"label\"\n                            style=\"\n                              display: flex;\n                              align-items: center;\n                              margin-bottom: 8px;\n                              font-size: 12px;\n                            \"\n                          >\n                            <div\n                              :style=\"{\n                                background: backgroundColors[index],\n                                width: '10px',\n                                height: '10px',\n                                marginRight: '10px',\n                              }\"\n                            ></div>\n                            {{ label }}\n                          </li>\n                        </ul>\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-sm-6 col-lg-3\">\n              <div class=\"card\">\n                <div class=\"card-body\">\n                  <div class=\"d-flex align-items-center\">\n                    <div class=\"subheader\">Missing Contact</div>\n                    <div class=\"ms-auto lh-1\">\n                      <div class=\"dropdown\">\n                        <a\n                          class=\"dropdown-toggle text-secondary\"\n                          href=\"#\"\n                          data-bs-toggle=\"dropdown\"\n                          aria-haspopup=\"true\"\n                          aria-expanded=\"false\"\n                          >Last 7 days</a\n                        >\n                        <div class=\"dropdown-menu dropdown-menu-end\">\n                          <a class=\"dropdown-item active\" href=\"#\"\n                            >Last 7 days</a\n                          >\n                          <a class=\"dropdown-item\" href=\"#\">Last 30 days</a>\n                          <a class=\"dropdown-item\" href=\"#\">Last 3 months</a>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"d-flex align-items-baseline\">\n                    <div class=\"h1 mb-3 me-2\">Demo</div>\n                    <div class=\"me-auto\">\n                      <span\n                        class=\"text-yellow d-inline-flex align-items-center lh-1\"\n                      >\n                        0%\n                        <!-- Download SVG icon from http://tabler-icons.io/i/minus -->\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          class=\"icon ms-1\"\n                          width=\"24\"\n                          height=\"24\"\n                          viewBox=\"0 0 24 24\"\n                          stroke-width=\"2\"\n                          stroke=\"currentColor\"\n                          fill=\"none\"\n                          stroke-linecap=\"round\"\n                          stroke-linejoin=\"round\"\n                        >\n                          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                          <path d=\"M5 12l14 0\" />\n                        </svg>\n                      </span>\n                    </div>\n                  </div>\n                  <div id=\"chart-new-clients\" class=\"chart-sm\"></div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-sm-6 col-lg-3\">\n              <div class=\"card\">\n                <div class=\"card-body\">\n                  <div class=\"d-flex align-items-center\">\n                    <div class=\"subheader\">Active Partners</div>\n                    <div class=\"ms-auto lh-1\">\n                      <div class=\"dropdown\">\n                        <a\n                          class=\"dropdown-toggle text-secondary\"\n                          href=\"#\"\n                          data-bs-toggle=\"dropdown\"\n                          aria-haspopup=\"true\"\n                          aria-expanded=\"false\"\n                          >Last 7 days</a\n                        >\n                        <div class=\"dropdown-menu dropdown-menu-end\">\n                          <a class=\"dropdown-item active\" href=\"#\"\n                            >Last 7 days</a\n                          >\n                          <a class=\"dropdown-item\" href=\"#\">Last 30 days</a>\n                          <a class=\"dropdown-item\" href=\"#\">Last 3 months</a>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"d-flex align-items-baseline\">\n                    <div class=\"h1 mb-3 me-2\">Demo</div>\n                    <div class=\"me-auto\">\n                      <span\n                        class=\"text-green d-inline-flex align-items-center lh-1\"\n                      >\n                        4%\n                        <!-- Download SVG icon from http://tabler-icons.io/i/trending-up -->\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          class=\"icon ms-1\"\n                          width=\"24\"\n                          height=\"24\"\n                          viewBox=\"0 0 24 24\"\n                          stroke-width=\"2\"\n                          stroke=\"currentColor\"\n                          fill=\"none\"\n                          stroke-linecap=\"round\"\n                          stroke-linejoin=\"round\"\n                        >\n                          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                          <path d=\"M3 17l6 -6l4 4l8 -8\" />\n                          <path d=\"M14 7l7 0l0 7\" />\n                        </svg>\n                      </span>\n                    </div>\n                  </div>\n                  <div id=\"chart-active-users\" class=\"chart-sm\"></div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-lg-6\">\n              <div class=\"card\">\n                <div class=\"card-body\">\n                  <h3 class=\"card-title\">Data Dashboard 1</h3>\n                  <div id=\"chart-mentions\" class=\"chart-lg\"></div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-lg-6\">\n              <div class=\"card\">\n                <div class=\"card-body\">\n                  <h3 class=\"card-title\">Data Dashboard 2</h3>\n                  <div class=\"ratio ratio-21x9\">\n                    <div>\n                      <div id=\"map-world\" class=\"w-100 h-100\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-12\">\n              <div class=\"card\">\n                <div class=\"card-header\">\n                  <h3 class=\"card-title\">Partner list</h3>\n                </div>\n                <div class=\"card-body border-bottom py-3\">\n                  <div class=\"d-flex\">\n                    <div class=\"text-secondary\">\n                      Show\n                      <div class=\"mx-2 d-inline-block\">\n                        <input\n                          type=\"text\"\n                          class=\"form-control form-control-sm\"\n                          value=\"8\"\n                          size=\"3\"\n                          aria-label=\"Invoices count\"\n                        />\n                      </div>\n                      entries\n                    </div>\n\n                    <div class=\"ms-auto text-secondary\">\n                      Search:\n                      <div class=\"ms-2 d-inline-block\">\n                        <input\n                          v-model=\"filterInput\"\n                          type=\"text\"\n                          class=\"form-control form-control-sm\"\n                          aria-label=\"Search invoice\"\n                        />\n                      </div>\n                    </div>\n                    <!-- <button\n                      class=\"btn btn-outline-success\"\n                      @click=\"exportToCSV()\"\n                    >\n                      export\n                    </button> -->\n                  </div>\n                </div>\n                <div class=\"table-responsive\">\n                  <table\n                    class=\"table card-table table-vcenter text-nowrap datatable\"\n                  >\n                    <thead>\n                      <tr>\n                        <th class=\"w-1\">\n                          <input\n                            class=\"form-check-input m-0 align-middle\"\n                            type=\"checkbox\"\n                            aria-label=\"Select all invoices\"\n                          />\n                        </th>\n                        <th>Partner Type</th>\n                        <th>Partner Name</th>\n                        <th>2B/2C</th>\n                        <th>Vertical</th>\n                        <th>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody v-if=\"user\">\n                      <tr v-for=\"partner in paginatedData\" :key=\"partner._id\">\n                        <td>\n                          <input\n                            class=\"form-check-input m-0 align-middle\"\n                            type=\"checkbox\"\n                            aria-label=\"Select invoice\"\n                          />\n                        </td>\n                        <td>\n                          {{ partner.third_partner_type }}\n                        </td>\n                        <td>\n                          <span class=\"flag flag-country-us\"></span>\n                          {{ partner.third_partner_name }}\n                        </td>\n                        <td>{{ partner.b2b_or_b2c }}</td>\n                        <td>{{ partner.vertical }}</td>\n                        <td class=\"text-end\">\n                          <router-link\n                            class=\"single-partner\"\n                            :to=\"'/single-partner/' + partner._id\"\n                          >\n                            <button\n                              class=\"btn btn-primary\"\n                              style=\"\n                                --bs-btn-padding-y: 0.25rem;\n                                --bs-btn-padding-x: 0.5rem;\n                                --bs-btn-font-size: 0.75rem;\n                              \"\n                            >\n                              detials\n                            </button>\n                          </router-link>\n                          <button\n                            class=\"btn btn-dark\"\n                            style=\"\n                              --bs-btn-padding-y: 0.25rem;\n                              --bs-btn-padding-x: 0.5rem;\n                              --bs-btn-font-size: 0.75rem;\n                            \"\n                            data-bs-toggle=\"dropdown\"\n                            @click.stop=\"deleteData(partner._id)\"\n                            v-if=\"user.identity == 'Super-Admin'\"\n                          >\n                            delete\n                          </button>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div class=\"card-footer d-flex align-items-center\">\n                  <p class=\"m-0 text-secondary\">\n                    Showing <span>1</span> to <span>8</span> of\n                    <span>16</span> entries\n                  </p>\n\n                  <ul class=\"pagination m-0 ms-auto\">\n                    <li\n                      class=\"page-item\"\n                      :class=\"{ disabled: currentPage === 1 }\"\n                    >\n                      <a\n                        class=\"page-link\"\n                        href=\" \"\n                        @click.prevent=\"moveWindow(-1)\"\n                      >\n                        <!-- SVG for 'prev' ... -->\n                        prev\n                      </a>\n                    </li>\n\n                    <li\n                      class=\"page-item\"\n                      v-for=\"page in visiblePages\"\n                      :key=\"page\"\n                      :class=\"{ active: page === currentPage }\"\n                    >\n                      <a\n                        class=\"page-link\"\n                        href=\"#\"\n                        @click.prevent=\"setCurrentPage(page)\"\n                        >{{ page }}</a\n                      >\n                    </li>\n\n                    <li\n                      class=\"page-item\"\n                      :class=\"{ disabled: currentPage === totalPages }\"\n                    >\n                      <a\n                        class=\"page-link\"\n                        href=\" \"\n                        @click.prevent=\"moveWindow(1)\"\n                      >\n                        next\n                        <!-- SVG for 'next' ... -->\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script setup>\nimport {useRouter} from 'vue-router';\nimport axios from \"../http\";\nimport { ref, computed, onMounted, watch, nextTick } from \"vue\";\nimport {\n  Chart,\n  DoughnutController,\n  ArcElement,\n  CategoryScale,\n  Tooltip,\n} from \"chart.js\";\nimport { useStore } from \"vuex\";\n\nChart.register(DoughnutController, ArcElement, CategoryScale, Tooltip);\n\nconst router = useRouter()\nconst store = useStore();\nconst partners = ref([]);\nconst filterInput = ref([]);\nconst exportsData = ref([]);\nconst currentPage = ref(1);\nconst itemsPerPage = ref(10);\nconst chart = ref(null);\nconst labels = ref([\n  \"collaborating\",\n  \"pending collaboration\",\n  \"collaboration paused\",\n]);\nconst backgroundColors = ref([\"#0d6efd\", \"#3d8bfd\", \"#9ec5fe\"]);\nconst selectedCity = ref(\"SH\");\nconst chartInstance = ref(null); // 存储图表实例\n\nconst user = computed(() => store.getters.user);\n\nconst pageWindowStart = ref(1); // Start page for sliding window\nconst windowSize = ref(3);     // Number of pages to display in the sliding window\n\nconst visiblePages = computed(() => {\n    let end = pageWindowStart.value + windowSize.value;\n    if (end > totalPages.value) end = totalPages.value;\n    return Array.from({ length: end - pageWindowStart.value }, (_, i) => i + pageWindowStart.value);\n});\n\n\nconst getData = () => {\n  axios\n    .get(\"api/partners\")\n    .then((res) => {\n      partners.value = res.data;\n    })\n    .catch((err) => console.log(err));\n};\n\nconst goto_add = () => {\n  router.push({ path: \"/add\" });\n};\n\nconst logOut = () =>{\n  localStorage.removeItem(\"userToken\");\n      //config vuex store\n      store.dispatch(\"clearCurrentState\");\n      router.push({ path: \"/login\" });\n}\n\nconst deleteData = (id) => {\n  axios.delete(\"api/partners/delete/\" + id);\n  getData();\n};\n\n\nconst paginatedData = computed(() => {\n    const filtered = filteredData(partners.value, filterInput.value);\n    const start = (currentPage.value - 1) * itemsPerPage.value;\n    const end = currentPage.value * itemsPerPage.value;\n    return filtered.slice(start, end);\n});\n\n\nfunction setCurrentPage(page) {\n    currentPage.value = page;\n}\n\nfunction moveWindow(direction) {\n    const newStart = pageWindowStart.value + direction * windowSize.value;\n    if (newStart >= 1 && newStart + windowSize.value <= totalPages.value + 1) {\n        pageWindowStart.value = newStart;\n    }\n}\n\n\nconst totalPages = computed(() => {\n    return Math.ceil(\n        filteredData(partners.value, filterInput.value).length / itemsPerPage.value\n    );\n});\n\n\n\nconst filteredData = (partners, value) => {\n  const regex = new RegExp(value, \"i\");\n  return partners.filter((partner) =>\n    Object.values(partner).some(\n      (field) => typeof field === \"string\" && regex.test(field)\n    )\n  );\n};\n\nconst contactPercentage = computed(() => {\n  const partnersWithContact = partners.value.filter((partner) => {\n    const hasSHContact =\n      partner.sh_contact && Object.keys(partner.sh_contact).length > 0;\n    const hasHZContact =\n      partner.hz_contact && Object.keys(partner.hz_contact).length > 0;\n    const hasBJContact =\n      partner.bj_contact && Object.keys(partner.bj_contact).length > 0;\n    return hasSHContact || hasHZContact || hasBJContact;\n  }).length;\n\n  if (partners.value.length === 0) return 0;\n  const percentage = (partnersWithContact / partners.value.length) * 100;\n  return parseFloat(percentage.toFixed(2));\n});\n\nconst selectCity = (city) => {\n  selectedCity.value = city;\n};\n\nconst currentData = computed(() => {\n  if (!partners.value || partners.value.length === 0) return [0, 0, 0];\n\n  const statusMapping = {\n    \"A. 待合作\": \"待合作\",\n    \"C. 合作中\": \"合作中\",\n    \"B. 合作暂停\": \"暂停合作\",\n  };\n  const counts = {\n    合作中: 0,\n    待合作: 0,\n    暂停合作: 0,\n  };\n\n  partners.value.forEach((partner) => {\n    let trackingProcess;\n\n    switch (selectedCity.value) {\n      case \"SH\":\n        trackingProcess = partner.SH_tracking_process || null;\n        break;\n      case \"HZ\":\n        trackingProcess = partner.HZ_tracking_process || null;\n        break;\n      case \"BJ\":\n        trackingProcess = partner.BJ_tracking_process || null;\n        break;\n      default:\n        trackingProcess = null;\n    }\n\n    if (trackingProcess && statusMapping[trackingProcess]) {\n      const key = statusMapping[trackingProcess];\n      if (counts[key] !== undefined) {\n        counts[key]++;\n      }\n    }\n  });\n  return [counts[\"合作中\"], counts[\"待合作\"], counts[\"暂停合作\"]];\n});\n\nconst initChart = () => {\n  const ctx = chart.value.getContext(\"2d\");\n  chartInstance.value = new Chart(ctx, {\n    type: \"doughnut\",\n    data: {\n      labels: labels.value,\n      datasets: [\n        {\n          data: currentData.value, // 注意这里使用 `.value` 获取计算属性的值\n          backgroundColor: backgroundColors.value,\n        },\n      ],\n    },\n    options: {\n      cutout: \"80%\",\n      responsive: true,\n      maintainAspectRatio: false,\n    },\n  });\n};\n\nonMounted(() => {\n  const fetchDataAndInitChart = async () => {\n    await getData();\n    initChart();\n  };\n  fetchDataAndInitChart();\n});\n\nwatch(currentData, (newData) => {\n  if (chartInstance.value) {\n    chartInstance.value.destroy(); // 销毁旧实例\n    // 重新实例化新图表\n    const ctx = chart.value.getContext(\"2d\");\n    chartInstance.value = new Chart(ctx, {\n      type: \"doughnut\",\n      data: {\n        labels: labels.value,\n        datasets: [{ data: newData, backgroundColor: backgroundColors.value }],\n      },\n      options: {\n        cutout: \"80%\",\n        responsive: true,\n        maintainAspectRatio: false,\n      },\n    });\n  }\n});\n\nconst uploadFile = async (event) => {\n  const file = event.target.files[0];\n  const formData = new FormData();\n  formData.append(\"csv\", file);\n  try {\n    await axios.post(\"api/partners/upload\", formData);\n    alert(\"上传成功！\");\n  } catch (err) {\n    alert(\"上传失败：\" + err.message);\n  }\n};\n\nconst exportToCSV = ()=> {\n      axios\n        .get(\"api/partners/export\")\n        .then((res) => {\n          this.exportsData = res.data;\n          const csv = [];\n          const headers = Object.keys(this.exportsData[0]);\n          csv.push(headers.join(\",\")); // 添加表头行\n\n          for (const partner of this.exportsData) {\n            const row = [];\n            for (const header of headers) {\n              const value =\n                partner[header] !== undefined ? partner[header] : \"\"; // 如果值为 undefined，则使用空字符串\n              row.push(value);\n            }\n            csv.push(row.join(\",\")); // 添加每条数据的行\n          }\n\n          const csvContent = csv.join(\"\\n\");\n          const blob = new Blob([csvContent], {\n            type: \"text/csv;charset=utf-8;\",\n          });\n\n          const downloadLink = document.createElement(\"a\");\n          const url = URL.createObjectURL(blob);\n\n          downloadLink.href = url;\n          downloadLink.download = \"data.csv\";\n          downloadLink.click();\n\n          URL.revokeObjectURL(url);\n        })\n        .catch((err) => console.log(err));\n    }\n</script>\n\n<style scoped>\n.page-wrapper {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n}\n.page-body {\n  margin-top: 1.25rem;\n  margin-bottom: 1.25rem;\n}\n@media (min-width: 1200px) {\n  .container,\n  .container-lg,\n  .container-md,\n  .container-sm,\n  .container-xl {\n    max-width: 1199px;\n  }\n}\n.container,\n.container-fluid,\n.container-lg,\n.container-md,\n.container-sm,\n.container-xl,\n.container-xxl {\n  width: 100%;\n  padding-right: var(--tblr-gutter-x, 0.5rem);\n  padding-left: var(--tblr-gutter-x, 0.5rem);\n  margin-right: auto;\n  margin-left: auto;\n}\n.row-deck > .col,\n.row-deck > [class*=\"col-\"] {\n  display: flex;\n  align-items: stretch;\n}\n.row > * {\n  min-width: 0;\n}\n.row-deck > .col .card,\n.row-deck > [class*=\"col-\"] .card {\n  flex: 1 1 auto;\n}\n.card {\n  box-shadow: rgba(35, 46, 60, 0.04) 0 2px 4px 0;\n  border: 1px solid rgba(101, 109, 119, 0.16);\n}\n@media (min-width: 992px) {\n  .col-lg-3 {\n    flex: 0 0 auto;\n    width: 25%;\n  }\n}\n@media (min-width: 992px) {\n  .col-lg-6 {\n    flex: 0 0 auto;\n    width: 50%;\n  }\n}\n.row-cards .row-cards {\n  flex: 1;\n}\n.row-cards {\n  --tblr-gutter-x: 1rem;\n  --tblr-gutter-y: 1rem;\n}\n.row > * {\n  max-width: 100%;\n  padding-right: calc(var(--tblr-gutter-x) / 2);\n  padding-left: calc(var(--tblr-gutter-x) / 2);\n  margin-top: var(--tblr-gutter-y);\n}\n.card-header:first-child {\n  border-radius: 3px 3px 0 0;\n}\n.position-relative {\n  position: relative !important;\n}\n.page-pretitle {\n  font-size: 0.625rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.04em;\n  line-height: 1.6;\n  color: #656d77;\n  display: flex;\n}\n.page-title {\n  margin: 0;\n  font-size: 1.25rem;\n  line-height: 1.4;\n  font-weight: 500;\n  color: inherit;\n  display: flex;\n  align-items: center;\n}\n.btn {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n\n  border-color: rgba(101, 109, 119, 0.24);\n  white-space: nowrap;\n}\n.btn-list {\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: -0.5rem !important;\n  margin-right: -0.5rem;\n}\n.btn-list > * {\n  margin: 0 0.5rem 0.5rem 0 !important;\n}\n.logout {\n  background-color: #fff;\n  color: #216bc4;\n}\n.add-new-partner {\n  background-color: #216bc4;\n  color: #f4f6fa;\n}\n.btn .icon {\n  width: 1.25rem;\n  height: 1.25rem;\n  min-width: 1.25rem;\n  margin: 0 0.5rem 0 -0.25rem;\n  vertical-align: middle;\n}\n@media (min-width: 576px) {\n  .d-sm-inline {\n    display: inline !important;\n  }\n}\n</style>","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=38d2ed54&scoped=true&lang=css\"\n\nimport exportComponent from \"/Users/jiandongz/Desktop/vue-partner-system/vue3-ts/client/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-38d2ed54\"]])\n\nexport default __exports__"],"names":["round","v","lim","l","h","Math","max","min","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","a","b","c","d","e","f","hex","h1","h2","eq","isShort","r","g","hexParse","str","ret","len","length","alpha","hexString","undefined","HUE_RE","hsl2rgbn","s","n","k","hsv2rgbn","hwb2rgbn","w","rgb","i","hueValue","rgb2hsl","range","calln","Array","isArray","map","hsl2rgb","hwb2rgb","hsv2rgb","hue","hueParse","m","exec","p1","p2","rotate","deg","hslString","x","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","unpack","unpacked","keys","Object","tkeys","j","ok","nk","replace","parseInt","names","nameParse","transparent","toLowerCase","RGB_RE","rgbParse","rgbString","to","pow","from","interpolate","rgb1","rgb2","t","modHSL","ratio","tmp","clone","proto","assign","fromObject","input","functionParse","charAt","Color","constructor","type","this","_rgb","_valid","valid","obj","mix","color","weight","c1","c2","w2","p","w1","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","noop","uid","id","isNullOrUndef","value","prototype","toString","call","slice","isObject","isNumberFinite","Number","isFinite","finiteOrDefault","defaultValue","valueOrDefault","toPercentage","dimension","endsWith","parseFloat","toDimension","callback","fn","args","thisArg","apply","each","loopable","reverse","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","index","source","target","create","klen","isValidKey","key","indexOf","_merger","options","tval","sval","merge","sources","merger","current","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","o","y","_splitKey","parts","split","part","push","_getKeyResolver","resolveObjectKey","resolver","_capitalize","toUpperCase","defined","isFunction","setsEqual","size","item","has","_isClickEvent","PI","TAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","_factorize","result","sqrt","sort","pop","isNumber","isNaN","toRadians","degrees","toDegrees","radians","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","angle","atan2","distance","distanceBetweenPoints","pt1","pt2","_normalizeAngle","_angleBetween","start","end","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","_int16Range","_isBetween","epsilon","_lookup","table","cmp","mid","hi","lo","_lookupByKey","last","ti","_rlookupByKey","_filterBetween","values","arrayEvents","listenArrayEvents","array","listener","_chartjs","listeners","defineProperty","configurable","enumerable","forEach","method","base","res","object","unlistenArrayEvents","stub","splice","_arrayUnique","items","set","Set","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","debounce","delay","timeout","clearTimeout","setTimeout","_toLeftRightCenter","align","_alignStartEnd","atEdge","elasticIn","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","isPatternOrGradient","getHoverColor","numbers","colors","applyAnimationsDefaults","defaults","duration","easing","loop","describe","_fallback","_indexable","_scriptable","name","properties","active","animation","resize","show","animations","visible","hide","applyLayoutsDefaults","autoPadding","padding","top","right","bottom","left","intlCache","Map","getNumberFormat","locale","cacheKey","JSON","stringify","formatter","get","Intl","NumberFormat","formatNumber","num","format","formatters","numeric","tickValue","ticks","chart","notation","delta","maxTick","abs","calculateDelta","logDelta","numDecimal","floor","minimumFractionDigits","maximumFractionDigits","logarithmic","remain","significand","includes","Ticks","applyScaleDefaults","display","offset","beginAtZero","bounds","clip","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","width","title","text","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","route","startsWith","overrides","descriptors","getScope$1","node","root","scope","Defaults","_descriptors","_appliers","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","onClick","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","override","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","local","appliers","toFontString","_measureText","data","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","height","restore","drawPoint","drawPointLegend","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","rect","fill","borderWidth","stroke","_isPointInArea","point","area","margin","clipArea","unclipArea","setRenderOpts","opts","translation","fillStyle","textAlign","textBaseline","decorateText","line","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","strokeStyle","decorationWidth","drawBackdrop","oldColor","fillRect","renderText","lines","strokeWidth","strokeColor","backdrop","strokeText","maxWidth","fillText","addRoundedRectPath","topLeft","bottomLeft","bottomRight","topRight","LINE_HEIGHT","FONT_STYLE","toLineHeight","matches","match","numberOrZero","_readValueToProps","props","objProps","read","prop","toTRBL","toTRBLCorners","toPadding","toFont","fallback","console","warn","resolve","inputs","info","cacheable","_addGrace","minmax","change","keepZero","add","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","cache","Symbol","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","_cached","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","ownKeys","storage","_storage","_attachContext","proxy","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","setContext","receiver","_resolveWithContext","allKeys","scriptable","indexable","_allKeys","isScriptable","isIndexable","readKey","prefix","needsSubResolver","_resolveScriptable","_resolveArray","getValue","Error","join","delete","createSubResolver","arr","filter","resolveFallback","getScope","parent","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","EPSILON","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","ownerDocument","defaultView","getStyle","el","property","getPropertyValue","positions","getPositionedStyle","styles","suffix","pos","useOffsetPos","shadowRoot","getCanvasPosition","touches","offsetX","offsetY","box","getBoundingClientRect","clientX","clientY","getRelativePosition","event","borderBox","boxSizing","paddings","borders","getContainerSize","maxHeight","container","containerStyle","containerBorder","containerPadding","clientWidth","clientHeight","round1","getMaximumSize","bbWidth","bbHeight","aspectRatio","margins","containerSize","maintainHeight","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","getRightToLeftAdapter","rectX","setWidth","xPlus","leftForLtr","itemWidth","getLeftToRightAdapter","_itemWidth","getRtlAdapter","rtl","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","draw","_active","_total","tick","_getAnims","charts","complete","progress","listen","cb","reduce","acc","cur","_duration","stop","cancel","remove","animator","interpolators","boolean","factor","c0","number","Animation","cfg","currentValue","_fn","_easing","_start","_loop","_target","_prop","_from","_to","_promises","update","elapsed","wait","promises","Promise","rej","resolved","Animations","config","_chart","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","resolveTargetOptions","_createAnimations","$shared","awaitAll","$animations","then","anim","all","scaleClip","allowedOverflow","defaultClip","xScale","yScale","toClip","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","singleMode","otherValue","convertObjectDataToArray","adata","isStacked","meta","stacked","getStackKey","indexScale","valueScale","getUserBounds","minDefined","maxDefined","NEGATIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","shift","createDatasetContext","dataset","createDataContext","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","static","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","addElements","isPluginEnabled","updateIndex","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","isExtensible","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","chartArea","resolveDatasetElementOptions","resolveDataElementOptions","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getRatioAndOffset","circumference","cutout","ratioX","ratioY","startAngle","endAngle","startX","startY","endX","endY","calcMax","calcMin","maxX","maxY","minX","minY","DoughnutController","animateRotate","animateScale","spacing","legend","generateLabels","fontColor","getDataVisibility","legendItem","toggleDataVisibility","super","innerRadius","outerRadius","getter","_getRotation","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","chartWeight","_getRingWeight","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","metaData","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","DateAdapterBase","members","init","formats","diff","startOf","endOf","adapters","_date","binarySearch","metaset","lookupMethod","_reversePixels","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","skip","getDistanceMetricForAxis","useX","useY","deltaX","deltaY","getIntersectItems","useFinalPosition","isPointInArea","evaluationFunc","inRange","getNearestRadialItems","getProps","getNearestCartesianItems","distanceMetric","minDistance","center","getCenterPoint","pointInArea","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","wrapBoxes","boxes","layoutBoxes","stackWeight","horizontal","isHorizontal","buildStacks","layouts","wrap","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","concat","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","handleMaxPadding","updatePos","getMargins","marginForPositions","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","addBox","_layers","z","removeBox","layoutItem","minPadding","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","releaseContext","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","eventListenerOptions","addListener","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","entry","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","OffscreenCanvas","Element","tooltipPosition","hasValue","final","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","_tickSize","maxScale","_length","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","next","ceil","majorStart","majorEnd","reverseAlign","offsetFromEdge","edge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","lineValue","getPixelForTick","garbageCollect","caches","gcLen","getTickMarkLength","getTitleHeight","createScaleContext","createTickContext","titleAlign","titleArgs","titleX","titleY","positionAxisID","getPixelForValue","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_cache","_dataLimitsCached","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","startPixel","endPixel","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","valueAt","idx","getValueForPixel","getPixelForDecimal","decimal","getDecimalForPixel","getBasePixel","getBaseValue","optionTicks","rot","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","borderDashOffset","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","getLineWidthForValue","findIndex","drawGrid","drawLine","setLineDash","lineDashOffset","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","defaultRoutes","routeDefaults","routes","propertyParts","sourceName","sourceScope","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","getOpts","pluginOpts","pluginScopeKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","defaultId","defaultScaleOptions","defaultID","initOptions","initData","initConfig","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","needContext","subResolver","resolverCache","hasFunction","version","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","_dataset","buildOrUpdateControllers","newControllers","order","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","clipArc","pixelMargin","angleMargin","toRadiusCorners","parseBorderRadius$1","angleDelta","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","circular","innerR","spacingOffset","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","halfAngle","halfRadius","fix","radiusOffset","WeakMap","positioners","average","eventPosition","nearestElement","tp","pushOrConcat","toPush","splitNewlines","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","boxWidth","boxHeight","bodyFont","titleFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","rtlHelper","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","usePointStyle","drawOptions","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","textDirection","positionChanged","_positionChanged","_ignoreReplayEvents","handleEvent","plugin_tooltip","_element","afterInit","_args","afterDraw","afterEvent","addIfString","addedLabels","unshift","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","LinearScale","LinearScaleBase","handleTickRangeOptions","computeTickLimit","LogarithmicScale","_zero","changeExponent","setMin","setMax","generationOptions","generateTicks","_setMinAndMaxByKey","RadialLinearScale","animate","angleLines","pointLabels","centerPointLabels","xCenter","yCenter","drawingArea","_pointLabels","_pointLabelItems","_padding","getTickBackdropHeight","fitWithPointLabels","setCenterPoint","leftMovement","rightMovement","topMovement","bottomMovement","getIndexAngle","angleMultiplier","getDistanceFromCenterForValue","scalingFactor","getValueForDistanceFromCenter","scaledDistance","getPointLabelContext","pointLabel","createPointLabelContext","getPointPosition","distanceFromCenter","additionalAngle","getPointPositionForValue","getBasePosition","getPointLabelPosition","pathRadiusLine","_endValue","drawPointLabels","drawRadiusLine","INTERVALS","millisecond","common","steps","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","unit","determineMajorUnit","addTick","time","timestamps","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","stepSize","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","curr","router","useRouter","store","useStore","partners","ref","filterInput","currentPage","itemsPerPage","backgroundColors","selectedCity","chartInstance","user","computed","getters","pageWindowStart","windowSize","visiblePages","totalPages","_","getData","axios","catch","err","log","goto_add","path","logOut","localStorage","removeItem","dispatch","deleteData","paginatedData","filtered","filteredData","setCurrentPage","page","moveWindow","newStart","regex","RegExp","partner","test","contactPercentage","partnersWithContact","hasSHContact","sh_contact","hasHZContact","hz_contact","hasBJContact","bj_contact","percentage","toFixed","selectCity","city","currentData","statusMapping","counts","合作中","待合作","暂停合作","trackingProcess","SH_tracking_process","HZ_tracking_process","BJ_tracking_process","initChart","onMounted","fetchDataAndInitChart","async","watch","newData","__exports__"],"sourceRoot":""}